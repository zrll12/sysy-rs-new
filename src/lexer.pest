WS = _{ (" " | "\t" | NEWLINE)+ }

/* Comments */
SINGLE_LINE = _{ "//" ~ (!NEWLINE ~ ANY)* }
MULTI_LINE = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
comment = _{ SINGLE_LINE | MULTI_LINE }

/* Keywords */
CONST = { "const" }
INT = { "int" }
VOID = { "void" }
IF = { "if" }
ELSE = { "else" }
WHILE = { "while" }
BREAK = { "break" }
CONTINUE = { "continue" }
RETURN = { "return" }

keywords = { CONST | INT | VOID | IF | ELSE | WHILE | BREAK | CONTINUE | RETURN }

/* Operators */
PLUS = { "+" }
MINUS = { "-" }
MUL = { "*" }
DIV = { "/" }
MOD = { "%" }

ASSIGN = { "=" }
EQ = { "==" }
NEQ = { "!=" }

LT = { "<" }
GT = { ">" }
LE = { "<=" }
GE = { ">=" }

NOT = { "!" }
AND = { "&&" }
OR = { "||" }

operators = { PLUS | MINUS | MUL | DIV | MOD | ASSIGN | EQ | NEQ | LT | GT | LE | GE | NOT | AND | OR }

/* Symbols */
L_PAREN = { "(" }
R_PAREN = { ")" }
L_BRACE = { "{" }
R_BRACE = { "}" }
L_BRACKT = { "[" }
R_BRACKT = { "]" }
COMMA = { "," }
SEMICOLON = { ";" }

symbols = { L_PAREN | R_PAREN | L_BRACE | R_BRACE | L_BRACKT | R_BRACKT | COMMA | SEMICOLON }

OCT_INTEGER = { "0" ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
HEX_INTEGER = { "0" ~ ( "x" | "X" ) ~ ASCII_DIGIT+ }
DEX_INTEGER = { ASCII_DIGIT+ }
integer = { OCT_INTEGER | HEX_INTEGER | DEX_INTEGER }

IDENT = { (ASCII_ALPHA | "_") ~ ( ASCII_ALPHANUMERIC | "_" )* }

/* Main Rules */
token = { comment | keywords | operators | symbols | integer | IDENT }

file = { SOI ~ (token | WS )* ~ EOI }